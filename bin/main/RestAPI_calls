1. Get Customer information over an REST API call
    * Any third-party application should be able to get Customer related information in JSON format.
    * The third-party should be able to request either all customer or filter information using any or all of the parameters like first name, last name and mobile number.
    * First name and Last name should be able to return result which partially match. Example if we have a user with first name Kathy then if we get request using first name filter criteria as "Kat", "aTHY" or "Ath" then Kathy should be returned.

1.a :get customer information given only firstname like "Joe"

url= http://localhost:8080/CustomerInfoManagementApplication/customer/search?firstName=Joe

sample Response= [
    {
        "id": 2,
        "firstName": "Joe",
        "lastName": "Turing",
        "mobileNumber": "9111111112"
    }
]

1.b :get customer information given only lastname like "Turi"

url=http://localhost:8080/CustomerInfoManagementApplication/customer/search?lastName=Turi

sample response = [
    {
        "id": 2,
        "firstName": "Joe",
        "lastName": "Turing",
        "mobileNumber": "9111111112"
    }
]

1.c :get customer information given only mobileNumber like "9111111112"

url= http://localhost:8080/CustomerInfoManagementApplication/customer/search?mobileNumber=9111111112

sample response = [
    {
        "id": 2,
        "firstName": "Joe",
        "lastName": "Turing",
        "mobileNumber": "9111111112"
    }
]

1.d: get customer information given only firstname like "Joe" and lastName="Turi"
 
 url= http://localhost:8080/CustomerInfoManagementApplication/customer/search?firstName=Joe&lastName=Turi

sample response =[
    {
        "id": 2,
        "firstName": "Joe",
        "lastName": "Turing",
        "mobileNumber": "9111111112"
    }
]

1.e: get customer information given only firstname like "Joe" and mobileNumber="9111111112"

url = http://localhost:8080/CustomerInfoManagementApplication/customer/search?firstName=Joe&mobileNumber=9111111112


sample response =[
    {
        "id": 2,
        "firstName": "Joe",
        "lastName": "Turing",
        "mobileNumber": "9111111112"
    }
]

1.f: get customer information given only lastname like "Turi" and mobileNumber="9111111112"

url = http://localhost:8080/CustomerInfoManagementApplication/customer/search?lastName=Turi&mobileNumber=9111111112

sample response =[
    {
        "id": 2,
        "firstName": "Joe",
        "lastName": "Turing",
        "mobileNumber": "9111111112"
    }
]

1.g : get customer information given firstName like "Joe" and lastname like "Turi" and mobileNumber="9111111112"

url = http://localhost:8080/CustomerInfoManagementApplication/customer/search?firstName=Joe&lastName=Turi&mobileNumber=9111111112

sample response =[
    {
        "id": 2,
        "firstName": "Joe",
        "lastName": "Turing",
        "mobileNumber": "9111111112"
    }
]

1.h : finding all customers

url = http://localhost:8080/CustomerInfoManagementApplication/customer/search

sample response = [
    {
        "id": 1,
        "firstName": "Alan",
        "lastName": "Smith",
        "mobileNumber": "9111111111"
    },
    {
        "id": 2,
        "firstName": "Joe",
        "lastName": "Turing",
        "mobileNumber": "9111111112"
    },
    {
        "id": 3,
        "firstName": "John",
        "lastName": "Smith",
        "mobileNumber": "9111111113"
    },
    {
        "id": 4,
        "firstName": "Kathy",
        "lastName": "Sierra",
        "mobileNumber": "9111111114"
    }
]



2. Adding Customer functionality

url=http://localhost:8080/CustomerInfoManagementApplication/customer/add

//adding successful customer with unique mobile number
request Body = 
{

    "firstName":"Krish",
    "lastName":"Mokashi",
    "mobileNumber":"8550965899"

}

response Body= {
    "id": 5,
    "firstName": "Krish",
    "lastName": "Mokashi",
    "mobileNumber": "8550965899"
}

//error occuring as putting same mobileNumber again
Request Body=
{

    "firstName":"Krish",
    "lastName":"Mokashi",
    "mobileNumber":"8550965899"

}

response body= 
{
    "message": "Customer Insertion Failed",
    "errorDetails": "could not execute statement; SQL [n/a]; constraint [\"PUBLIC.CUSTOMER_UK1_INDEX_5 ON PUBLIC.CUSTOMER(MOBILE_NUMBER NULLS FIRST) VALUES ( /* 5 */ '8550965899' )\"; SQL statement:\ninsert into customer (id, first_name, last_name, mobile_number) values (default, ?, ?, ?) [23505-214]]",
    "timeStamp": "2023-04-30T00:48:11.9773098"
}


5.Deleting Customer by his Mobile Number 

url = http://localhost:8080/CustomerInfoManagementApplication/customer/delete/8550965897

if mobile number is found then it will show message as 

response body = 
{
    "message": "Customer deleted having id as 1 having mobile No 9111111111"
}

if mobile Number is not found then it will show error as no mobile number is found
response body = 
{
    "message": "Mobile Number not found",
    "errorDetails": "Cannot invoke \"com.avisys.cim.Customer.getId()\" because the return value of \"com.avisys.cim.Repository.CustomerRepository.findByMobileNumber(String)\" is null",
    "timeStamp": "2023-04-30T01:58:51.2736929"
}
